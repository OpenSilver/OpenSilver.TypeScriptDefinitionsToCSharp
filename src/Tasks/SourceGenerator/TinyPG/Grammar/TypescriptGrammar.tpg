// @TinyPG - a Tiny Parser Generator v1.3
// Copyright Â© Herre Kuijpers 2008-2012
// this grammar describes the BNF notation

// Incorporated revisions by William A. McKee Aug. 14, 2008

// OPEN THIS FILE WITH "TinyPG"
// <http://www.codeproject.com/Articles/28294/a-Tiny-Parser-Generator-v>
// You also have some documentation on this website

<% @TinyPG Namespace="TinyPG" %>

// Keywords
K_TYPEOF		-> @"typeof";
K_CLASS		    -> @"class";
K_INTERFACE		-> @"interface";
K_NEW			-> @"new";
K_FUNCTION		-> @"function";
K_VAR			-> @"var";
K_NAMESPACE		-> @"namespace";
K_MODULE		-> @"module";
K_DECLARE		-> @"declare";
K_EXTENDS		-> @"extends";
K_IMPLEMENTS	-> @"implements";
K_STATIC		-> @"static";
K_IMPORT		-> @"import";
K_EXPORT		-> @"export";
K_EXPORT_EQ		-> @"export\s+=";
K_REQUIRE		-> @"require";
K_GET			-> @"get";
K_SET			-> @"set";
K_READONLY		-> @"readonly";
K_ENUM			-> @"enum";
K_CONST		    -> @"const";
K_LET			-> @"let";
K_PUBLIC		-> @"public";

// Terminals:
IDENT			-> @"[a-zA-Z_$][a-zA-Z0-9_]*";
DOT			    -> @"\.";
COMMA			-> @",";
COLON			-> @":";
SEMICOLON		-> @";";
LBRACKET		-> @"\[";
RBRACKET		-> @"\]";
LBRACE			-> @"\{";
RBRACE			-> @"\}";
LPAREN			-> @"\(";
RPAREN			-> @"\)";
VBAR			-> @"\|";
INFERIOR		-> @"<";
SUPERIOR		-> @">";
QUESTION		-> @"\?";
FATARROW		-> @"=>";
SPREADOP		-> @"\.\.\.";
SIMPLEQUOTE		-> @"'";
DOUBLEQUOTE		-> @"""";
EQUALS			-> @"=";
EOF			    -> @"^$";
DOLLAR			-> @"\$";
STRING			-> @""".*""";

// Composed Rules
DOTIDENT		-> @"[a-zA-Z_][a-zA-Z0-9_]*(\.[a-zA-Z_][a-zA-Z0-9_]*)*"; // ident.ident2.ident3
DOTIDENT_WITH_ADDITIONAL_CHARS_ALLOWED -> @"[a-zA-Z_\-\/][a-zA-Z0-9_\-\/]*(\.[a-zA-Z_\-\/][a-zA-Z0-9_\-\/]*)*"; // This is used in TypeScript module names, between double quotes, which can have forward slashes and dashes, such as: "ident/ident-2/ident-3"
FUNCTION		-> @"([a-zA-Z_][a-zA-Z0-9_]*)?(<.*>)?\??\s*\(";
GENERIC		    -> @"[a-zA-Z_][a-zA-Z0-9_]*(\.[a-zA-Z_][a-zA-Z0-9_]*)*<";
ARRAYLEVEL		-> @"\[\]";
GENERIC_ARG		-> @"<[a-zA-Z0-9_](, [a-zA-Z0-9_])*>";

[Skip]
WHITESPACE		-> @"\s+";

// You cannot have two "Productive lines" (see below) starting whith the same set of "Terminals"
// For example, if you have two lines starting by an IDENT only, there will be collision
// But if you have IDENT for one and IDENT | OTHER_TERMINAL, you can, it's different.
// So I had to make some "strange" things, like those "Composed Rules" (see above).
// Here Variable and Function had the same start (IDENT QUESTION? .....)
// So I made a FUNCTION with the opening parenthesis as difference. Ludovic.

// Productive lines
Start			-> ((K_DECLARE? (Namespace | (((K_VAR Variable) | (K_FUNCTION Function)) SEMICOLON?))) | Interface | Class)+ EOF;
Namespace		-> (K_NAMESPACE | K_MODULE) (DOUBLEQUOTE | SIMPLEQUOTE)? (DOTIDENT_WITH_ADDITIONAL_CHARS_ALLOWED | DOTIDENT) (DOUBLEQUOTE | SIMPLEQUOTE)? LBRACE NamespaceContent RBRACE;
NamespaceContent -> ((AccessTag* (Namespace | ((((K_FUNCTION Function) | (K_VAR? Variable)) SEMICOLON?)) | Enum | Class | Interface)) | Import | Export)*;
Generic		    -> GENERIC Type (COMMA Type)* SUPERIOR;
FunctionType	-> LPAREN ParamList? RPAREN FATARROW Type;
Typeof			-> K_TYPEOF DOTIDENT;
AnonymousType		-> LBRACE (K_READONLY? (Function | Variable | Getter | Setter | Indexer | Enum) (COMMA | SEMICOLON)?)* RBRACE;
Type			-> ((DOTIDENT | Generic | FunctionType | Typeof) ARRAYLEVEL* (VBAR (DOTIDENT | Generic | FunctionType | Typeof) ARRAYLEVEL*)*) | (AnonymousType ARRAYLEVEL*);
//Type		       -> (DOTIDENT | Generic | FunctionType) ARRAYLEVEL* (VBAR (DOTIDENT | Generic | FunctionType) ARRAYLEVEL*)*;
Variable		-> IDENT QUESTION? (COLON (STRING | Type))?;
Indexer		    -> LBRACKET Variable RBRACKET COLON Type SEMICOLON?;
ParamList		-> SPREADOP? Variable (COMMA SPREADOP? Variable)*;
Function		-> FUNCTION ParamList? RPAREN (COLON Type)?;
BlockElement		-> ((Variable | Function| Getter | Setter) SEMICOLON) | Indexer | Enum;
Interface		-> K_INTERFACE IDENT GENERIC_ARG? Extends? LBRACE (AccessTag* (BlockElement | Class | Interface))* RBRACE SEMICOLON?;
Class			-> K_CLASS IDENT GENERIC_ARG? Extends? LBRACE (AccessTag* (BlockElement | Class | Interface))* RBRACE SEMICOLON?;
AccessTag		-> K_STATIC | K_EXPORT | K_READONLY | K_CONST | K_LET | K_PUBLIC;
Getter			-> K_GET LPAREN ParamList? RPAREN COLON Type;
Setter			-> K_SET LPAREN ParamList? RPAREN COLON Type;
Extends		    -> (K_EXTENDS | K_IMPLEMENTS) (DOTIDENT | Generic) (COMMA (DOTIDENT | Generic))*;
Export			-> K_EXPORT_EQ ((DOLLAR | IDENT) (DOT IDENT)*) SEMICOLON;
Import			-> K_IMPORT DOTIDENT EQUALS (K_NAMESPACE | K_MODULE | K_REQUIRE) LPAREN (DOUBLEQUOTE | SIMPLEQUOTE) (DOTIDENT_WITH_ADDITIONAL_CHARS_ALLOWED | DOTIDENT) (DOUBLEQUOTE | SIMPLEQUOTE) RPAREN SEMICOLON;
Enum			-> K_ENUM IDENT LBRACE (IDENT COMMA?)* RBRACE;
//Enum			-> K_ENUM IDENT LBRACE ( IDENT (COMMA IDENT)* )? RBRACE; // This line was commented because it did not work if the list of enums ended with a comma.

