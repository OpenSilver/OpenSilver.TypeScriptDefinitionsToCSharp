HOW TO USE TINYPG TO CREATE THE TYPESCRIPT DEFINITION PARSER

---------------
How to compile:
---------------

1) Launch the compiler from TinyPG/Compiler/TinyPG.exe

2) Open the grammar file by clicking File->Open.

3) Click "Build->Generate" to generate the C# files. The following files will be generated inside the folder where the grammar is located ("TinyPG/Grammar/"):

- Parser.cs
- Scanner.cs
- Tool.cs

4) Move the said generated files from the folder where the grammar is located ("TinyPG/Grammar/") into the root folder of the project "DotNetForHtml5.Compiler.TypeScriptDefToCSharp".

IMPORTANT: You can override the existing files, but you should merge the stuff marked as "// NEW" in the file "Scanner.cs". In fact, they are required to properly update the progress bar.


---------------
How to test the grammar/parser with some TypeScript Definition file from within the TinyPG.exe app:
---------------

1) Launch the compiler from TinyPG/Compiler/TinyPG.exe

2) Open the grammar file by clicking File->Open.

3) Click View->Expression Evaluator, and copy/paste your TypeScript Definition file into the Expression Evaluator

IMPORTANT: Make sure to remove any "comment" line from the TypeScript Definition file.

4) Click "Build->Generate & Run". You should be able to see the result of the parsing in the "Parse Tree" pane on the right. If it doesn't work, try relaunching the application.



---------------
Some general information about TinyPG:
---------------


- TinyPG takes as input a specified grammar file (.tpg) and generates some C# files that can be used to implement the parser.

- The Grammar file is stored in TinyPG/Grammar/TypescriptGrammar.tpg
It uses a modified BNF notation. If you are familiar with regexp, you will understand it easily.
You can find good documentation on the 'codeproject' page: http://www.codeproject.com/Articles/28294/a-Tiny-Parser-Generator-v1-2

- For me the compilation sometimes bugs, and I need to restart the program to see the effect. It's a bit boring but if it happens to you, you can try restarting.

- The outputed files are:
	Scanner.cs
	Parser.cs
	ParseTree.cs
The output files are generated in the folder where the grammar is located ("TinyPG/Grammar/")

Note: This parser is good but not so much because it is slow and its "BNF" syntax is a bit restrictive. For example, 2 different rules cannot begin with the same terminal rule (= a keyword, a symbol, ect...). To resolve this, I created some rules almost identical. This explains the 'ident' and 'dotident', where 'dotident' is just some "ident" separated by points.


